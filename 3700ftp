#!/usr/bin/env python3
from array import array
from ast import parse
from re import S
import argparse, logging, socket, json
from urllib.parse import urlparse

def sendMessage(s: socket, messageToSend: object):
  msg = messageToSend.encode()
  totalBytesSent = 0
  while totalBytesSent < len(msg):
      # send logic inspiration: https://docs.python.org/3/howto/sockets.html
      nextSent = s.send(msg[totalBytesSent:])
      if nextSent == 0:
          raise RuntimeError("lost socket connection")
      totalBytesSent = totalBytesSent + nextSent
  print('sent ', totalBytesSent, ' bytes')

def receieveMessage(s: socket):
  buffer = ''
  try:
      while "\n" not in buffer: 
          data = s.recv(1024).decode('utf-8')
          # buffer logic inspiration: https://stackoverflow.com/questions/55922194/python-breaks-string-after-first-character
          if not data:
              break
          buffer += data
  except Exception as loopException:
      print("Exception occurred in loop:", loopException)
  print('receieved:', buffer)
  return buffer


def authenticate(sock, username, pwd):
  userMsg = "USER " + username + "\r\n"
  pwdMsg = "PASS " + pwd + "\r\n"
  sendAndRecieve(sock, userMsg, 'user')
  sendAndRecieve(sock, pwdMsg, 'pwd')
  return True
  

def quit(sock):
  quitMsg = "QUIT\r\n"
  sendAndRecieve(sock, quitMsg, 'quit')
  

def prepareToUploadOrDownload(sock):
  # only before uploading or downloading anything
  typeMsg = "TYPE I\r\n"
  modeMsg = "MODE S\r\n"
  struMsg = "STRU F\r\n"
  sendAndRecieve(sock, typeMsg, 'type')
  sendAndRecieve(sock, modeMsg, 'mode')
  sendAndRecieve(sock, struMsg, 'stru')


def ftpClient(args, loglevel):
  logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)

  print(args.param2)
  op = str(args.operation)
  arg1 = args.param1
  arg2 = args.param2

  # print('\n\n' + arg2)
  if op != "ls" and op != "mkdir" and op != "rm" and op != "rmdir" and op != "cp" and op != "mv":
    print("please specify one of the operations: ls, mkdir, rm, rmdir, cp, mv")
    return

  if (op == "cp" or op == "mv"): # cases where the url may be arg1 or arg2
    if not arg2:
      print("please provide both arguments for the copy or move operation")
      return

    parseArg1 = urlparse(str(arg1))
    parseArg2 = urlparse(str(arg2)) 
    if parseArg1.scheme == "ftp" and parseArg2.scheme != "ftp": # downloading
      print('\narg1 is url\n')
      parsed = parseArg1
      localFile = str(arg2)
      loadingType = "downloading"
    elif parseArg2.scheme == "ftp" and parseArg1.scheme != "ftp": # uploading
        print('\narg2 is url\n')
        parsed = parseArg2
        localFile = str(arg1)
        loadingType = "uploading"
    else:
      print('please pass the ftp url as one of the arguments')
      return

  else:
    parsed = urlparse(str(arg1))
 
  if parsed is None:
    print('err!!')
    return 

  # print(parsed)
  # print('scheme  :', parsed.scheme)

  host = parsed.hostname or 'ftp.3700.network'    
  # host = 'ftp.3700.network'
  #port = parsed.port or 21
  port = 21
  path = parsed.path

  # print(host, port)
  username = parsed.username
  pwd = parsed.password

  if username == "" or pwd == "":
    print("503 error: username and password required")

  # create STREAMing socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((host, port))
  print('(host, port) = ', (host, port))

  try:  
    receieveMessage(sock)
  except:
    print('cant receieve...')

  try:  
    authenticated = authenticate(sock, username, pwd)
  except:
    print('!!! authentication failed !!!') 
    quit(sock)
    return

  # wait for authentication to proceed to the operation
  if authenticated:

    if (op == "mkdir"):
      sendAndRecieve(sock, "MKD " + path + "\r\n", 'MKD')

    if (op == "rmdir"):
      sendAndRecieve(sock, "RMD " + path + "\r\n", 'RMD')
    
    if (op == "ls"):
      dataChannel = createDataChannel(sock)
      sendAndRecieve(sock, "LIST " + path + "\r\n", 'LIST')
      try:  
        receieveMessage(dataChannel)
      except:
        print('cant receieve ls response from data channel...')

    # if (op == "cp"):
    #   print('in cp')
    #   if not localFile or not loadingType:
    #     print('no local file')
    #     return
        
    #   # you have localFile and parsed, those are the things!
    #   dataChannel = createDataChannel(sock)
    #   if loadingType == "uploading":
    #     print('\nuploading!')
    #     # print('\nlocalFile:', localFile)
    #     # print('\n ftppath:', path)
    #     sendAndRecieve(sock, "STOR /testerFile.txt\r\n", 'STOR') # wait for 150: Ok to send data
    #     #sendAndRecieve(sock, "STOR ../../../Desktop/testerfile\r\n", 'STOR')

    #   elif loadingType == "downloading":
    #     print('\ndownloading!')
    #     sendAndRecieve(sock, "RETR " + path + "\r\n", 'RETR')
    #   else:
    #     print('no loading type')
    #     return

    #   try:  
    #     send(dataChannel, "STOR /testerFile.txt\r\n", 'STOR') # ithink?
    #   except:
    #     print('cant upload over data channel...')

    #   try:  
    #     receieveMessage(sock)
    #   except:
    #     print('cant get sock res')

    #   if loadingType == "uploading":
    #     dataChannel.close() # need to close dc


    # if (op == "rm"):
    #   dataChannel = createDataChannel(sock)
    #   sendAndRecieve(sock, "DELE " + path + "\r\n", 'DELE')
    #   try:  
    #     receieveMessage(dataChannel)
    #   except:
    #     print('cant receieve ls response from data channel...')
      # close it?

  quit(sock)
  print('done, closing tcp socket')
  sock.close()
  



def createDataChannel(sock):
  res = sendAndRecieve(sock, "PASV\r\n", 'PASV')
  numArr = res[res.find("(") + 1: res.find(")")].split(",")
  ip = numArr[0] + "." + numArr[1] + "." + numArr[2] + "." + numArr[3]
  port = (int(numArr[4]) << 8) + int(numArr[5])
  dataChannel = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  dataChannel.connect((ip, port))
  return dataChannel

def send(sock, msg, msgType):
  try:
    sendMessage(sock, msg)
  except:
    print('could not send ', msgType, ' message')

def sendAndRecieve(sock, msg, msgType):
  try:
    sendMessage(sock, msg)
  except:
    print('could not send ', msgType, ' message')
  try:  
    return receieveMessage(sock)
  except:
   print('could not receieve ', msgType, ' response')

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='ftp client!')
  parser.add_argument('operation', type=str, help='the operation')
  parser.add_argument('param1', type=str, help='param 1') # first param required
  parser.add_argument('param2', type=str, nargs='?', help='param 2') # second param optional
  args = parser.parse_args()
  
  loglevel = logging.INFO
  
  ftpClient(args, loglevel)