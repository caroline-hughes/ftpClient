#!/usr/bin/env python3
import argparse, logging, socket
from io import BufferedReader, BufferedWriter
import string
from urllib.parse import urlparse

def sendMessage(s: socket, messageToSend: object, encode=True):
  if encode:
    msg = messageToSend.encode()
  else:
    msg = messageToSend
  totalBytesSent = 0
  while totalBytesSent < len(msg):
      # send logic inspiration: https://docs.python.org/3/howto/sockets.html
      nextSent = s.send(msg[totalBytesSent:])
      if nextSent == 0:
          raise RuntimeError("lost socket connection")
      totalBytesSent = totalBytesSent + nextSent
  print('sent ', totalBytesSent, ' bytes')


def receieveMessage(s: socket):
  buffer = ''
  try:
    while "\n" not in buffer: 
        data = s.recv(1024).decode('utf-8')
        # buffer logic inspiration: https://stackoverflow.com/questions/55922194/python-breaks-string-after-first-character
        if not data:
            break
        buffer += data
  except Exception as loopException:
      print("Exception occurred in loop:", loopException)
  print('receieved:', buffer)
  return buffer

# create a data channel by sending the PASV on the control socket, then 
# using the ip and port information in the response to open another
def createDataChannel(sock: socket):
  res = sendAndRecieve(sock, "PASV\r\n", 'PASV')
  numArr = res[res.find("(") + 1: res.find(")")].split(",")
  ip = numArr[0] + "." + numArr[1] + "." + numArr[2] + "." + numArr[3]
  port = (int(numArr[4]) << 8) + int(numArr[5])
  dataChannel = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  dataChannel.connect((ip, port))
  return dataChannel


# send the given message on the given socket
def bytesSend(sock: socket, msg, msgType: string):
  try:
    sendMessage(sock, msg, False)
  except:
    print('could not send ', msgType, ' message')


# listen for response on the given socket
def receieve(sock: socket, msgType: string):
  try:  
    return receieveMessage(sock)
  except:
   print('could not receieve ', msgType, ' response')


# for ease of cases when both occur together
def sendAndRecieve(sock: socket, msg, msgType: string):
  try:
    sendMessage(sock, msg)
  except:
    print('could not send ', msgType, ' message')
  try:  
    return receieveMessage(sock)
  except:
   print('could not receieve ', msgType, ' response')


# send the login information to the server socket
def authenticate(sock: socket, username: string, pwd: string):
  userMsg = "USER " + username + "\r\n"
  pwdMsg = "PASS " + pwd + "\r\n"
  sendAndRecieve(sock, userMsg, 'user')
  sendAndRecieve(sock, pwdMsg, 'pwd')
  return True
  

# send the quit message to the server socket
def quit(sock: socket):
  quitMsg = "QUIT\r\n"
  sendAndRecieve(sock, quitMsg, 'quit')
  

# calls to be made to the server socket before uploading or downloading bytes
def prepareToUploadOrDownload(sock: socket):
  sendAndRecieve(sock, "TYPE I\r\n", 'type')
  sendAndRecieve(sock, "MODE S\r\n", 'mode')
  sendAndRecieve(sock, "STRU F\r\n", 'stru')


# ftp client which supports mkdir, rmdir, ls, rm, cp, and mv
def ftpClient(args, loglevel):
  logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)

  op = str(args.operation)
  arg1 = args.param1
  arg2 = args.param2

  if op != "ls" and op != "mkdir" and op != "rm" and op != "rmdir" and op != "cp" and op != "mv":
    print("supported operations: ls, mkdir, rm, rmdir, cp, mv")
    return

  localFile="None"
  loadingType="None"
  if (op == "cp" or op == "mv"):
    if not arg2:
      print("please provide two arguments for the cp or mv operation")
      return

    # identify which param is ftp url and which is local file
    parseArg1 = urlparse(str(arg1))
    parseArg2 = urlparse(str(arg2)) 
    if parseArg1.scheme == "ftp" and parseArg2.scheme != "ftp":
      parsed = parseArg1
      localFile = str(arg2)
      loadingType = "downloading"
    elif parseArg2.scheme == "ftp" and parseArg1.scheme != "ftp":
        parsed = parseArg2
        localFile = str(arg1)
        loadingType = "uploading"
    else:
      print('for this operation, please pass two arguments: the ftp url and a local file')
      return
  else:
    parsed = urlparse(str(arg1))

  host = parsed.hostname or 'ftp.3700.network'    
  port = parsed.port or 21
  path = parsed.path
  username = parsed.username
  pwd = parsed.password
  
  if username == "" or pwd == "":
    print("503 error: username and password required")
    return

  # create STREAMing socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((host, port))
  receieve(sock, "welcome message")

  # authenticate with username and password
  try:  
    authenticated = authenticate(sock, username, pwd)
  except:
    return

  # once authenticated, perform the operation
  if authenticated:
      performOperation(op, sock, path, localFile, loadingType)

  quit(sock)
  sock.close()
  

# UPLOAD HELPER
def uploadHelper(sock: socket, dataChannel: socket, path: string, localFile: string):
  res = sendAndRecieve(sock, "STOR " + path + "\r\n", 'STOR')
  if "553" in res:
    return
  try: 
    fileToUpload: BufferedReader = open(localFile, "rb")
    bytesSend(dataChannel, fileToUpload.read(), 'upload bytes')
    fileToUpload.close()
  except:
    print('could not upload')

  dataChannel.close()


# DOWNLOAD HELPER
def downloadHelper(sock: socket, dataChannel: socket, path: string, localFile: string):
  res = sendAndRecieve(sock, "RETR " + path + "\r\n", 'RETR')
  if "553" in res:
    return
  try: 
    destinationFile: BufferedWriter = open(localFile, "wb+")
    destinationFile.write(dataChannel.recv(8192))
    destinationFile.close()
  except:
    print('could not download')
  

# DELEGATE TO OPERATION IMPLEMENTATION
def performOperation(op, sock, path, localFile, loadingType):
  if op == "mkdir":
    sendAndRecieve(sock, "MKD " + path + "\r\n", 'MKD')

  if op == "rmdir":
    sendAndRecieve(sock, "RMD " + path + "\r\n", 'RMD')
  
  if op == "rm":
    sendAndRecieve(sock, "DELE " + path + "\r\n", 'DELE')

  if op == "ls":
    dataChannel = createDataChannel(sock)
    sendAndRecieve(sock, "LIST " + path + "\r\n", 'LIST')
    receieve(dataChannel, "cant receieve ls response from data channel...")

  if op == "cp" or op == "mv":
    prepareToUploadOrDownload(sock)
    dataChannel = createDataChannel(sock) 

    if loadingType == "uploading":
      uploadHelper(sock, dataChannel, path, localFile)
    elif loadingType == "downloading":
      downloadHelper(sock, dataChannel, path, localFile)
    else:
      return


if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='ftp client!')
  parser.add_argument('operation', type=str, help='the operation')
  parser.add_argument('param1', type=str, help='param 1') # required first param
  parser.add_argument('param2', type=str, nargs='?', help='param 2') # optional second param

  args = parser.parse_args()
  
  loglevel = logging.INFO
  
  ftpClient(args, loglevel)