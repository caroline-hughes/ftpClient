#!/usr/bin/env python3
import argparse, logging, socket
from urllib.parse import urlparse

def sendMessage(s: socket, messageToSend: object, encode= True):
  if encode:
    msg = messageToSend.encode()
  else:
    print('not encoding...')
    msg = messageToSend
  print('sending encoded msg:', msg)
  totalBytesSent = 0
  while totalBytesSent < len(msg):
      # send logic inspiration: https://docs.python.org/3/howto/sockets.html
      nextSent = s.send(msg[totalBytesSent:])
      if nextSent == 0:
          raise RuntimeError("lost socket connection")
      totalBytesSent = totalBytesSent + nextSent
  print('sent ', totalBytesSent, ' bytes')


def receieveMessage(s: socket, decode=True):
  buffer = ''
  try:
    if decode:
      while "\n" not in buffer: 
          data = s.recv(1024).decode('utf-8')
          # buffer logic inspiration: https://stackoverflow.com/questions/55922194/python-breaks-string-after-first-character
          if not data:
              break
          buffer += data
    else:
      buffer = s.recv(8192)
  except Exception as loopException:
      print("Exception occurred in loop:", loopException)
  print('receieved:', buffer)
  return buffer


# create a data channel by sending the PASV on the control socket, then 
# using the ip and port information in the response to open another
def createDataChannel(sock):
  res = sendAndRecieve(sock, "PASV\r\n", 'PASV')
  numArr = res[res.find("(") + 1: res.find(")")].split(",")
  ip = numArr[0] + "." + numArr[1] + "." + numArr[2] + "." + numArr[3]
  port = (int(numArr[4]) << 8) + int(numArr[5])
  dataChannel = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  dataChannel.connect((ip, port))
  return dataChannel


# send the given message on the given socket
def send(sock, msg, msgType, encode=True):
  try:
    sendMessage(sock, msg, encode)
  except:
    print('could not send ', msgType, ' message')


# listen for response on the given socket
def receieve(sock, msgType, decode=True):
  try:  
    return receieveMessage(sock, decode)
  except:
   print('could not receieve ', msgType, ' response')


# for ease of cases when both occur together
def sendAndRecieve(sock, msg, msgType):
  try:
    sendMessage(sock, msg)
  except:
    print('could not send ', msgType, ' message')
  try:  
    return receieveMessage(sock)
  except:
   print('could not receieve ', msgType, ' response')


# send the login information to the server socket
def authenticate(sock, username, pwd):
  userMsg = "USER " + username + "\r\n"
  pwdMsg = "PASS " + pwd + "\r\n"
  sendAndRecieve(sock, userMsg, 'user')
  sendAndRecieve(sock, pwdMsg, 'pwd')
  return True
  

# send the quit message to the server socket
def quit(sock):
  quitMsg = "QUIT\r\n"
  sendAndRecieve(sock, quitMsg, 'quit')
  

def prepareToUploadOrDownload(sock):
  # only before uploading or downloading anything
  typeMsg = "TYPE I\r\n"
  modeMsg = "MODE S\r\n"
  struMsg = "STRU F\r\n"
  sendAndRecieve(sock, typeMsg, 'type')
  sendAndRecieve(sock, modeMsg, 'mode')
  sendAndRecieve(sock, struMsg, 'stru')


def ftpClient(args, loglevel):
  logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)

  op = str(args.operation)
  arg1 = args.param1
  arg2 = args.param2

 #=============================================================================
  if op != "ls" and op != "mkdir" and op != "rm" and op != "rmdir" and op != "cp" and op != "mv":
    print("supported operations: ls, mkdir, rm, rmdir, cp, mv")
    return

 #=============================================================================
  if (op == "cp" or op == "mv"): # cases where the url may be arg1 or arg2
    if not arg2:
      print("please provide both arguments for the copy or move operation")
      return

    parseArg1 = urlparse(str(arg1))
    parseArg2 = urlparse(str(arg2)) 
    if parseArg1.scheme == "ftp" and parseArg2.scheme != "ftp": # downloading
      parsed = parseArg1
      localFile = str(arg2)
      loadingType = "downloading"
    elif parseArg2.scheme == "ftp" and parseArg1.scheme != "ftp": # uploading
        parsed = parseArg2
        localFile = str(arg1)
        loadingType = "uploading"
    else:
      print('for this operation, please pass two arguments: the ftp url and a local file')
      return
  else:
    parsed = urlparse(str(arg1))

 #=============================================================================

  # print(parsed)
  host = parsed.hostname or 'ftp.3700.network'    
  port = parsed.port or 21
  path = parsed.path

  username = parsed.username
  pwd = parsed.password
  if username == "" or pwd == "":
    print("503 error: username and password required")

  # create STREAMing socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((host, port))

  # listen for Welcome message
  receieve(sock, "welcome message")

  # Authenticate with username and pwd
  try:  
    authenticated = authenticate(sock, username, pwd)
  except:
    print('!!! authentication failed !!!') 
    quit(sock)
    return

  # proceed to the operation once authenticated
  if authenticated:

    if (op == "mkdir"):
      sendAndRecieve(sock, "MKD " + path + "\r\n", 'MKD')

    if (op == "rmdir"):
      sendAndRecieve(sock, "RMD " + path + "\r\n", 'RMD')
    
    if (op == "ls"):
      dataChannel = createDataChannel(sock)
      sendAndRecieve(sock, "LIST " + path + "\r\n", 'LIST') # initiate using control
      receieve(dataChannel, "cant receieve ls response from data channel...") # actual get the data

    if (op == "cp"):
      if not localFile or not loadingType:
        print('no local file')
        return

      prepareToUploadOrDownload(sock)
      dataChannel = createDataChannel(sock) 

      if loadingType == "uploading":
        fileToUpload = open(localFile, "rb")
        # tell the server the path to store the incoming data
        res = sendAndRecieve(sock, "STOR " + path + "\r\n", 'STOR') # --> "150: Ok to send data"
        if "553" in res:
          return

        try: 
          send(dataChannel, fileToUpload.read(), 'upload bytes', False)
        except:
          print('could not upload')

        dataChannel.close()
        fileToUpload.close()
        receieve(sock, "response from upload")

      elif loadingType == "downloading":
        print('\ndownloading!')

        destinationFile = open(localFile, "wb+") # write or create if doesnt exist
        res = sendAndRecieve(sock, "RETR " + path + "\r\n", 'RETR') # --> "150: ?"
        if "553" in res:
          return

        try: 
          bytesReceieved = receieve(dataChannel, 'download bytes', False)
          print("bytesReceieved", bytesReceieved)
        except:
          print('could not download')
        
        destinationFile.write(bytesReceieved)
        destinationFile.close()

      else:
        print('no loading type')
        return

    # if (op == "rm"):
    #   dataChannel = createDataChannel(sock)
    #   sendAndRecieve(sock, "DELE " + path + "\r\n", 'DELE')
    #   try:  
    #     receieveMessage(dataChannel)
    #   except:
    #     print('cant receieve ls response from data channel...')
      # close it?

  print('\n\n\n\nat end, peace')
  quit(sock)
  # print('done, closing tcp socket')
  sock.close()
  

  

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='ftp client!')
  parser.add_argument('operation', type=str, help='the operation')
  parser.add_argument('param1', type=str, help='param 1') # first param required
  parser.add_argument('param2', type=str, nargs='?', help='param 2') # second param optional
  args = parser.parse_args()
  
  loglevel = logging.INFO
  
  ftpClient(args, loglevel)