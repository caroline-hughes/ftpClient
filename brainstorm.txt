ftp://hughesca:iEjqNW5nFSpT0ucmrUHw@ftp.3700.network:22/PATH


Modern FTP implementations use TCP/IP as their transport and network protocols. 
Thus, to connect to an FTP Server, your client will need to open a TCP socket.

once successfully connected, youll get a welcome message from server...





Once your client has connected a TCP socket to a remote server, it will begin exchanging 
text-formatted requests and responses with the FTP server.

client requests take form: 

    COMMAND <param> <...>\r\n

COMMAND is typically a three or four letter command, in all caps, 
that tells the FTP server to perform some action. Depending on what command is sent, 
additional parameters may also be required (but may not). All FTP requests end with \r\n.


the server will respond with at least one but possibly two messages, in form:

    CODE <human readable explanation> <param>.\r\n


CODE is a three digit integer that specifies whether the FTP server was able to complete the request.

1XX codes indicate that more action is expected (e.g., waiting for a file to download or upload);
2XX codes indicate success;
3XX indicates preliminary success, but more action is required (e.g., your client sent a username, but now a valid password is required);
4XX, 5XX, and 6XX codes indicate that an error has occurred.

Responses may also include a parameter that is necessary for the client to function 
(most importantly, for the PASV command, see below). All FTP responses end with \r\n.


ftp://[USER[:PASSWORD]@]HOST[:PORT]/PATH

$ ./3700ftp ls ftp://bob:s3cr3t@ftp.example.com/



left todo:

cp <ARG1> <ARG2>         Copy the file given by ARG1 to the file given by
                          ARG2. If ARG1 is a local file, then ARG2 must be a URL, and vice-versa.

either 
    cp ftp.../remoteFile.txt /Desktop/testFile.txt  --> download local in --> RETR
    cp /Desktop/testFile.txt ftp.../remoteFile.txt  --> upload local out --> STOR
                

./3700ftp cp ~/Desktop ftp://hughesca:iEjqNW5nFSpT0ucmrUHw@ftp.3700.network:22/hello.txt


mv <ARG1> <ARG2>         Move the file given by ARG1 to the file given by
                          ARG2. If ARG1 is a local file, then ARG2 must be a URL, and vice-versa.
rm <URL>                 Delete the file on the FTP server at the given URL


IM ON: STEP 5-- STORE, RETR, and DELE. 

Complete your client by adding support for file upload, download, and deletion. 
Double check your implementation by comparing it to the results from a standard FTP client.


STOR <path-to-file>\r\n
// upload new file with given path == copy local file to remote

RETR <path-to-file>\r\n
// Download a file with the given path and name from the FTP server.

DELE <path-to-file>\r\n
// Delete the given file on the FTP server. Equivalent to rm on the Unix command line.